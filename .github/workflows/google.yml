name: Build and Deploy to GKE

on:
  push:
    branches:
    - "*"
  delete: 
    branches:
    - "*"

env:
  PINGPONG_IMAGE: pingpong
  LOGOUTPUT_IMAGE: logoutput
  BRANCH: ${{ github.ref_name }}
  
jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - id: "auth"
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}
      
    - name: 'Set up Cloud SDK'
      uses: google-github-actions/setup-gcloud@v2

    - name: 'Use gcloud CLI'
      run: gcloud info

    - name: Docker configuration
      run: gcloud --quiet auth configure-docker
      
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        project_id: ${{ secrets.PROJECT_ID }}

    - name: Build pingpong Docker image
      run: |-
        docker build \
          --tag "gcr.io/${{ env.GCP_PROJECT }}/${{ env.PINGPONG_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" \
          "./${{ env.PINGPONG_IMAGE }}"

    - name: Build logoutput Docker image
      run: |-
        docker build \
          --tag "gcr.io/${{ env.GCP_PROJECT }}/${{ env.LOGOUTPUT_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" \
          "./${{ env.LOGOUTPUT_IMAGE }}"

    - name: Publish pingpong Docker image
      run: |-
        docker push "gcr.io/${{ env.GCP_PROJECT }}/${{ env.PINGPONG_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" 

    - name: Publish logoutput Docker image
      run: |-
        docker push "gcr.io/${{ env.GCP_PROJECT }}/${{ env.LOGOUTPUT_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}"
      
    - name: Install Kustomize
      run: |-
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        mv kustomize /usr/local/bin/
    
    - name: Deploy
      run: |-
        cd "./manifests/base"

        NAMESPACE=todo-${GITHUB_REF#refs/heads/}
        if [ "$NAMESPACE" == "main" ]; then
          NAMESPACE=todo-default
        fi

        kubectl create namespace $NAMESPACE || true
        kubectl config set-context --current --namespace=$NAMESPACE
        kustomize edit set namespace $NAMESPACE

        kustomize edit set image ${{ env.PINGPONG_IMAGE }}="gcr.io/${{ env.GCP_PROJECT }}/${{ env.PINGPONG_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" 
        kustomize edit set image ${{ env.LOGOUTPUT_IMAGE }}="gcr.io/${{ env.GCP_PROJECT }}/${{ env.LOGOUTPUT_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" 
        kustomize build . | kubectl apply -f -
        
        # Get the services information
        kubectl get services -o wide

    - name: Commit changes
      run: |
        git add .
        git commit -m "Automated update by GitHub Actions [skip ci]"
      continue-on-error: true

    - name: Push changes
      run: |
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  delete-environment:
    name: Delete env
    if: github.event_name == 'delete'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - id: "auth"
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}
      
    - name: 'Set up Cloud SDK'
      uses: google-github-actions/setup-gcloud@v2

    - name: 'Use gcloud CLI'
      run: gcloud info

    - name: Docker configuration
      run: gcloud --quiet auth configure-docker
      
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        project_id: ${{ secrets.PROJECT_ID }}

    - name: Delete namespace
      run: |-
        NAMESPACE=${GITHUB_REF#refs/heads/}
        if [ "$NAMESPACE" != "main" ]; then
          kubectl delete namespace $NAMESPACE
        fi
    
